"""
Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0

"""


class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        for idx in range(1, len(nums)):
            nums[idx] += nums[idx-1]
        nums = [0]+nums
        
        left, right = 1, 1
        min_len = len(nums)+1
        
        for right in range(1, len(nums)):
            while nums[right]-nums[left-1] >= target:
                min_len = min(min_len, right-left+1)
                left+=1
        
        if min_len == len(nums)+1:
            return 0
        return min_len
