"""
Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.

 

Example 1:

Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.
[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.
[2] with maximum absolute diff |2-2| = 0 <= 4.
[2,4] with maximum absolute diff |2-4| = 2 <= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 > 4.
[4] with maximum absolute diff |4-4| = 0 <= 4.
[4,7] with maximum absolute diff |4-7| = 3 <= 4.
[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.
Example 2:

Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.
Example 3:

Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3


"""

class Solution:
    def longestSubarray(self, nums: List[int], limit: int) -> int:
        
        i = 0
        longest = 0
        minq, maxq = deque(), deque()
        for j, x in enumerate(nums):
            while minq and x < minq[-1]: minq.pop()
            while maxq and x > maxq[-1]: maxq.pop()
            minq.append(x)
            maxq.append(x)
            if maxq[0] - minq[0] > limit:
                if maxq[0] == nums[i]: maxq.popleft()
                if minq[0] == nums[i]: minq.popleft()
                i += 1
            longest = max(longest, j - i + 1)
        return longest

           

                
